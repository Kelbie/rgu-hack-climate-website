{"version":3,"sources":["config.js","Components/Header/Header.js","Components/BlogCard/BlogCard.js","Containers/Blogs/Blogs.js","Components/GithubReactionTextCard/GithubReactionTextCard.js","Containers/BlogPost/BlogPost.js","Routes.js","serviceWorker.js","index.js"],"names":["config","githubConvertedToken","githubUserName","githubRepo","title","subtitle","Header","className","BlogCard","blog","useState","lables","setLables","history","useHistory","useEffect","nodes","filter","value","name","getLabels","labels","map","key","id","style","backgroundColor","color","readingTime","body","minutes","onClick","number","push","bodyText","Blogs","blogs","setBlogs","getBlogsFromGithubIssues","useCallback","ApolloClient","uri","request","operation","setContext","headers","authorization","atob","query","gql","then","result","array","data","repository","issues","v","i","GithubReactionTextCard","link","href","target","rel","role","aria-label","BlogHome","addReaction","setAddreaction","reactionCounter","setReactionCounter","issueNumber","parseInt","window","location","split","pop","getEmojiStringByName","emojiName","setReactionFun","reactions","reactions_array","forEach","element","obj","by","user","login","emoji","content","setBlogsFunction","issue","catch","err","console","error","src","author","avatarUrl","alt","moment","updatedAt","format","url","options","overrides","a","component","children","props","jsx","pre","language","docco","counters","onSelect","log","githubCounterEmojiSelect","onAdd","createBrowserHistory","require","Routes","exact","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1e3a3741.chunk.js","sourcesContent":["export const config = {\n  // Your Github Converted Token To Know How To Get Your Token Look at Readme.md\n  githubConvertedToken: \"ODM5ODY0MWRmYzUxOTcyZTdhMWMxM2NmZGIwNWU4Yzc3NmI5NTg0ZQ==\",\n\n  //   Your Github UserName\n  githubUserName: \"saadpasta\",\n  //   Your Github Repo Name Where You Have your issues as Blog\n\n  githubRepo: \"react-blog-github\",\n\n  // Your Personal Blog Title\n  title : \"Saad Pasta\" ,\n\n  // Your Personal Blog Subtitle\n  subtitle : \"Front End Developer Blog\"\n};\n","import React from 'react'\n\nimport './Header.css'\nimport {config} from \"../../config\"\n\nexport default function Header() {\n    return (\n        <div className=\"main-header\">\n        <div className=\"wrap-big\">\n            <h1 className=\"header-title\">{config.title}</h1>\n            <h2 className=\"header-subtitle\">{config.subtitle}</h2>\n            </div>\n        </div>\n    )\n}\n","import React, { useState, useEffect } from \"react\";\nimport readingTime from \"reading-time\";\nimport { useHistory } from \"react-router-dom\";\n\nimport \"./BlogCard.css\";\n\n\nexport default function BlogCard({ blog }) {\n  const [lables, setLables] = useState([]);\n\n  let history = useHistory();\n\n  useEffect(() => {\n    getLabels(blog.labels.nodes);\n  }, [blog.labels.nodes]);\n\n  function openBlog(title, number) {\n    history.push(`/blog/${title}/${number}`);\n  }\n\n  function getLabels(nodes) {\n    const lables = nodes.filter((value) => {\n      return value.name !== \"blog\";\n    });\n    setLables(lables);\n  }\n\n  return (\n    <div className=\"blog-card-div\">\n      <div className=\"blog-card-header\">\n        <div>\n          {lables.map(value => {\n            return (\n              <div key={value.id} className=\"blog-catgeory\" style={{ backgroundColor: `#${value.color}` }}>\n                {value.name}\n              </div>\n            );\n          })}\n        </div>\n        <div>\n          <p className=\"reading-time\">{readingTime(blog.body).minutes} Min Read</p>\n        </div>\n      </div>\n      <div>\n        <div className=\"blog-card-title\">\n          <h2 onClick={() => openBlog(blog.title, blog.number)}>{blog.title}</h2>\n        </div>\n        <div className=\"blog-card-description\">\n          <p>\n            {blog.bodyText}\n          </p>\n        </div>\n        <div className=\"blog-card-footer\"></div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { gql } from \"apollo-boost\";\n\nimport Header from \"../../Components/Header/Header\";\nimport BlogCard from \"../../Components/BlogCard/BlogCard\";\nimport { config } from \"../../config\";\n\nfunction Blogs() {\n  const [blogs, setBlogs] = useState([]);\n  const getBlogsFromGithubIssues = useCallback(() => {\n    const client = new ApolloClient({\n      uri: \"https://api.github.com/graphql\",\n      request: operation => {\n        operation.setContext({\n          headers: {\n            authorization: `Bearer ${atob(config.githubConvertedToken)}`\n          }\n        });\n      }\n    });\n\n    client\n      .query({\n        query: gql`\n          {\n            repository(owner: \"${config.githubUserName}\", name: \"${config.githubRepo}\") {\n              issues(first: 100, states: OPEN, filterBy: { labels: \"blog\" }) {\n                nodes {\n                  title\n                  body\n                  bodyHTML\n                  bodyText\n                  number\n                  labels(first: 100) {\n                    nodes {\n                      color\n                      name\n                      id\n                    }\n                  }\n                  author {\n                    url\n                    avatarUrl\n                    login\n                  }\n                  updatedAt\n                  id\n                }\n              }\n            }\n          }\n        `\n      })\n      .then(result => {\n        setBlogsFunction(result.data.repository.issues.nodes);\n      });\n  }, []);\n\n  useEffect(() => {\n    getBlogsFromGithubIssues();\n  }, [getBlogsFromGithubIssues]);\n\n  function setBlogsFunction(array) {\n    setBlogs(array);\n  }\n  return (\n    <div>\n      <Header />\n      <div className=\"blog-div-main\">\n        {blogs.map((v, i) => {\n          return <BlogCard blog={v} key={i} />;\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default Blogs;\n","import React from \"react\";\n\nimport \"./GithubReactionTextCard.css\";\n\nexport default function GithubReactionTextCard({ link }) {\n  return (\n    <div className=\"reaction-text-github-div\">\n      <p>Give your reaction on Github</p>\n      <div></div>\n      <span>\n        <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n          Github link <span role=\"img\" aria-label=\"lightning bolt\">⚡️</span>\n        </a>\n      </span>\n    </div>\n  );\n}\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { gql } from \"apollo-boost\";\nimport moment from \"moment\";\nimport Markdown from \"markdown-to-jsx\";\nimport readingTime from \"reading-time\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\nimport { GithubCounter } from \"react-reactions\";\n\nimport \"./BlogPost.css\";\nimport { config } from \"../../config\";\nimport GithubReactionTextCard from \"../../Components/GithubReactionTextCard/GithubReactionTextCard\";\n\nexport default function BlogHome() {\n  const [blog, setBlogs] = useState([]);\n  const [addReaction, setAddreaction] = useState(false);\n  const [reactionCounter, setReactionCounter] = useState([]);\n  const issueNumber = parseInt(window.location.href.split(\"/\").pop());\n\n  const getEmojiStringByName = useCallback((emojiName) => {\n    switch (emojiName) {\n      case \"THUMBS_UP\":\n        return \"👍\";\n\n      case \"THUMBS_DOWN\":\n        return \"👎\";\n\n      case \"LAUGH\":\n        return \"😄\";\n\n      case \"HOORAY\":\n        return \"🎉\";\n\n      case \"CONFUSED\":\n        return \"😕\";\n\n      case \"HEART\":\n        return \"❤️\";\n\n      case \"ROCKET\":\n        return \"🚀\";\n\n      case \"EYES\":\n        return \"👀\";\n\n      default:\n        return \"\";\n    }\n  }, []);\n\n  const setReactionFun = useCallback((reactions) => {\n    // {\n    //   emoji: \"👍\", // String emoji reaction\n    //   by: \"case\" // String of persons name\n    // }\n\n    let reactions_array = [];\n    reactions.forEach(element => {\n      let obj = {\n        by: element.user.login,\n        emoji: getEmojiStringByName(element.content)\n      };\n      reactions_array.push(obj);\n    });\n\n    setReactionCounter(reactions_array);\n  }, [getEmojiStringByName]);\n\n  const setBlogsFunction = useCallback((array) => {\n    setBlogs(array);\n    setReactionFun(array.reactions.nodes);\n  }, [setReactionFun]);\n\n  const getBlogsFromGithubIssues = useCallback(() => {\n    const client = new ApolloClient({\n      uri: \"https://api.github.com/graphql\",\n      request: operation => {\n        operation.setContext({\n          headers: {\n            authorization: `Bearer ${atob(config.githubConvertedToken)}`\n          }\n        });\n      }\n    });\n\n    client\n      .query({\n        query: gql`\n          {\n            repository(owner: \"${config.githubUserName}\", name: \"${config.githubRepo}\") {\n              issue(number: ${issueNumber}) {\n                title\n                body\n                bodyHTML\n                url\n                bodyText\n                number\n                bodyHTML\n                author {\n                  url\n                  avatarUrl\n                  login\n                }\n                reactions(first:100){\n                  nodes{\n                    content\n                    user{\n                      id\n                      login\n                    }\n                  }\n                }\n                updatedAt\n                id\n              }\n            }\n          }\n        `\n      })\n      .then(result => {\n        setBlogsFunction(result.data.repository.issue);\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  }, [issueNumber, setBlogsFunction]);\n\n\n  useEffect(() => {\n    getBlogsFromGithubIssues();\n  }, [getBlogsFromGithubIssues]);\n\n  const HyperLink = ({ children, ...props }) => (\n    <a href={props.href} target=\"_blank\" rel=\"noopener noreferrer\" className=\"blog-post-anchor\">\n      {children}\n      <style jsx>\n        {`\n          a {\n            color: #484848;\n            font-weight: 400;\n          }\n        `}\n      </style>\n    </a>\n  );\n\n  const CodeBlock = ({ children }) => (\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\n      {children.props.children}\n    </SyntaxHighlighter>\n  );\n\n  function githubCounterEmojiSelect(emoji) {\n    console.log(emoji);\n  }\n\n  function githubCounterAddReaction() {\n    setAddreaction(!addReaction);\n  }\n\n  return (\n    <div>\n      {blog.title && (\n        <div className=\"blog-view\">\n          <h1 className=\"blog-title\">{blog.title}</h1>\n          <div>\n            <div className=\"author-details\">\n              <img className=\"avatar\" src={blog.author.avatarUrl} alt={blog.author.login} />\n              <div>\n                <p className=\"author-name\">{blog.author.login}</p>\n                <p className=\"blog-date\">\n                  {moment(blog.updatedAt).format(\"DD MMM YYYY\")} . {readingTime(blog.body).minutes} Min Read . <a href={blog.url} target=\"_black\">View On Github</a>\n                </p>\n              </div>\n            </div>\n          </div>\n          <Markdown\n            options={{\n              overrides: {\n                a: {\n                  component: HyperLink\n                },\n                pre: {\n                  component: CodeBlock\n                }\n              }\n            }}\n          >\n            {blog.body}\n          </Markdown>\n          {addReaction && (\n            <span className=\"reaction-github-emoji anim-scale-in\">\n              {/* <GithubSelector onSelect={emoji => onEmojiSelect(emoji)} /> */}\n              <GithubReactionTextCard link={blog.url}/>\n            </span>\n          )}\n          <GithubCounter counters={reactionCounter} onSelect={emoji => githubCounterEmojiSelect(emoji)} onAdd={() => githubCounterAddReaction()} />\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Blogs from \"./Containers/Blogs/Blogs\"\nimport BlogHome from \"./Containers/BlogPost/BlogPost\";\n\nvar createBrowserHistory = require(\"history\").createBrowserHistory;\nconst history = createBrowserHistory();\n\n\nconst Routes = () => {\n  return (\n    <Router history={history}>\n      <Switch>\n        <Route exact path=\"/\" component={Blogs} />\n        <Route exact path=\"/blog/:title/:issueNumber\" component={BlogHome}/>\n      </Switch>\n    </Router>\n  );\n};\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Routes from './Routes';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}